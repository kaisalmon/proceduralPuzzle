QUnit.module('performance', {
  beforeEach() {
    performance.clearMarks();
    performance.clearMeasures();
  }
});

function sleep(delay) {
  var start = performance.now();
  while (true) {
    if (performance.now() - start >= delay) {
      break;
    }
  }
}

QUnit.test('now', function (assert) {
  var start = performance.now();
  sleep(10);
  assert.ok(performance.now() - start < 12);
});


QUnit.test('performance.mark', function (assert) {
  performance.mark("foo");
  sleep(50);
  performance.mark("bar");
  sleep(100);
  performance.mark("baz");

  assert.equal(performance.getEntriesByType('mark').length, 3);
  assert.ok(performance.getEntriesByName('baz')[0].startTime - performance.getEntriesByName('bar')[0].startTime < 110, 'baz - bar');
  assert.ok(performance.getEntriesByName('bar')[0].startTime - performance.getEntriesByName('foo')[0].startTime < 60, 'bar - foo');

  performance.clearMarks('bar');

  assert.equal(performance.getEntriesByType('mark').length, 2);
  assert.equal(performance.getEntriesByName('foo').length, 1);
  assert.equal(performance.getEntriesByName('bar').length, 0);
  assert.equal(performance.getEntriesByName('baz').length, 1);

  performance.clearMarks();
  assert.equal(performance.getEntriesByType('mark').length, 0);
});


QUnit.test('performance.measure', function (assert) {
  performance.mark("foo");
  sleep(5);
  performance.mark("bar");

  performance.measure('foo_bar', 'foo', 'bar');

  assert.equal(performance.getEntriesByType('measure').length, 1);
  assert.ok(performance.getEntriesByName('foo_bar')[0].duration < 6, performance.getEntriesByName('foo_bar')[0].duration + '');

  performance.mark("foo");
  sleep(5);
  performance.mark("bar");
  sleep(5);
  performance.mark("foo");

  performance.measure('foo_bar', 'foo', 'bar');
  assert.equal(performance.getEntriesByType('measure').length, 2);
  assert.ok(performance.getEntriesByName('foo_bar')[1].duration <= -5, performance.getEntriesByName('foo_bar')[1].duration + '');

  performance.clearMarks();
  performance.clearMeasures();
  assert.equal(performance.getEntriesByType('measure').length, 0);
});

QUnit.test('performance.measure no endMark', function (assert) {
  performance.mark('foo');
  sleep(20);
  performance.measure('foo_bar', 'foo');

  const duration = performance.getEntriesByName('foo_bar')[0].duration;
  assert.ok(duration >= 20);
});

QUnit.test('performance.measure no marks', function (assert) {
  performance.measure('foo_bar');

  const duration = performance.getEntriesByName('foo_bar')[0].duration;
  assert.ok(duration - performance.now() < 20);
});

QUnit.test('performance.measure wrong startMark name', function (assert) {
  try {
    performance.measure('foo_bar', 'non_existent_mark');
    assert.ok(false, 'Should throw SyntaxError');
  } catch (err) {
    assert.ok(err instanceof SyntaxError, 'Should throw SyntaxError');
  }
});

QUnit.test('performance.measure wrong endMark name', function (assert) {
  try {
    performance.mark('foo');
    performance.measure('foo_bar', 'foo', 'non_existent_mark');
    assert.ok(false, 'Should throw SyntaxError');
  } catch (err) {
    assert.ok(err instanceof SyntaxError, 'Should throw SyntaxError');
  }
});